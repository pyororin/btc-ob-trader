# optimizer/optimizer.py で使用する設定を定義します。
# このファイルはオプティマイザの起動に必須です。

# ------------------------------------------------------------------------------
# 基本設定 (Basic Settings)
# ------------------------------------------------------------------------------

# check_interval_seconds: 新しい最適化ジョブがないか確認する間隔（秒）。
check_interval_seconds: 900

# params_dir: 最適化結果のパラメータファイル（trade_config.yaml）や
# Optunaのスタディデータベース（.db）が保存されるディレクトリ。
params_dir: 'data/params'

# ------------------------------------------------------------------------------
# 最適化設定 (Optimization Settings)
# ------------------------------------------------------------------------------

# n_trials: 1回のIn-Sample(IS)最適化サイクルで試行する最大回数。
n_trials: 1000

# warm_start_max_trials: 既存のスタディを再利用する際、過去の学習結果を何件まで読み込むか。
warm_start_max_trials: 100

# min_trades_for_pruning: IS最適化中、取引回数がこの値に満たない試行を枝刈り（pruning）し、
# 非効率な探索を早期に打ち切ります。
min_trades_for_pruning: 10

# coarse_to_fine: Coarse-to-Fine（粗から密へ）探索により、効率的に最適解を見つけます。
# 最初に広い探索空間で有望な領域を特定し（coarse）、次にその領域を深く探索します（fine）。
coarse_to_fine:
  enabled: true
  coarse_trials: 300
  fine_trials: 200
  top_trials_quantile_for_kde: 0.2

# ------------------------------------------------------------------------------
# 評価と検証 (Evaluation & Validation)
# ------------------------------------------------------------------------------

# oos_min_sharpe_ratio: Out-of-Sample(OOS)評価での合格基準となる最小シャープレシオ。
# この値を下回るパラメータは本番採用されません。
oos_min_sharpe_ratio: 0.5

# oos_min_trades: OOS評価での合格基準となる最小取引回数。
oos_min_trades: 10

# max_retry: OOS評価で不合格だった場合、ISの上位から何番目までのパラメータを試すか。
max_retry: 5

# early_stop_count: OOS評価で、著しく低いシャープレシオがこの回数連続した場合、
# それ以上のリトライを停止します。
early_stop_count: 5

# early_stop_threshold_ratio: 早期停止のトリガーとなるシャープレシオの閾値。
# (ISの最良シャープレシオ * この割合) で計算されます。
early_stop_threshold_ratio: 0.7

# ------------------------------------------------------------------------------
# 目的関数と安定性分析 (Objective & Stability)
# ------------------------------------------------------------------------------

# objective_weights: Optunaの多目的最適化における各指標の重み付け。
# これらの値は、最終的な評価スコアを計算する際の各指標の重要度を決定します。
objective_weights:
  # シャープレシオ: リスク調整後リターン
  sharpe_ratio: 1.0
  # プロフィットファクター: 総利益 / 総損失
  profit_factor: 1.0
  # 最大ドローダウン: 資産のピークからの最大下落率 (値が大きいほど良いと評価されるよう内部で反転)
  max_drawdown: 0.5
  # SQN (System Quality Number): システムの品質指標 (SharpeRatio * sqrt(TotalTrades))
  sqn: 0.5
  # 取引回数
  trades: 0.2
  # 約定実現率: シグナル数に対する実際の約定数の割合。過学習の抑制に寄与。
  realization_rate: 2.0

# stability_analysis: パラメータの安定性分析（ロバスト性チェック）。
# 最適化されたパラメータに微小なノイズ（jitter）を加えて複数回シミュレーションを実行し、
# パフォーマンスの悪化が少なければ、そのパラメータは安定的（ロバスト）であると評価します。
stability_analysis:
  n_runs: 5
  jitter_factor: 0.05
  penalty_factor: 0.75

# ==============================================================================
# ウォークフォワード分析 (Walk-Forward Analysis, WFA)
# ==============================================================================
# 新しい本番パラメータ候補の有効性を、過去データを用いたフォワードテストで検証します。
wfa:
  # WFAで分析対象とする全体の期間（日数）。
  total_days: 0.1667
  # 上記期間内に作成する「学習/検証」スプリット（fold）の数。
  n_splits: 5
  # 1つのスプリットにおける学習（最適化）期間の日数。
  train_days: 0.08
  # 1つのスプリットにおける検証期間の日数。
  validate_days: 0.015
  # 1学習スプリットごとに実行するOptunaの試行回数。
  n_trials_per_fold: 200
  # WFAを「成功」とみなし本番パラメータを更新するために必要となる、
  # 検証に成功したスプリットの最小割合。
  min_success_ratio: 0.6

# ==============================================================================
# 分析設定 (Analysis Settings)
# ==============================================================================
# analyzer: 最適化結果の事後分析に関する設定。
analyzer:
  # 上位何%の試行を詳細分析の対象とするか。
  top_trials_quantile: 0.1

# ==============================================================================
# パラメータ探索空間 (Parameter Search Space)
# ==============================================================================
# Optunaがパラメータを提案（suggest）する際の探索範囲を定義します。
# 各パラメータの型（type）に応じて、適切な suggest_* メソッドが呼び出されます。
#
# - type: "int" -> suggest_int(low, high)
# - type: "float" -> suggest_float(low, high, log)
# - type: "categorical" -> suggest_categorical(choices)
#
parameter_space:
  spread_limit:
    type: "categorical"
    choices: [20, 40, 60, 80]
  long_tp:
    type: "categorical"
    choices: [6000, 8000, 9000, 10000, 12000]
  long_sl:
    type: "categorical"
    choices: [-4000, -5000, -6000, -7000, -8000]
  short_tp:
    type: "categorical"
    choices: [6000, 8000, 9000, 10000, 12000]
  short_sl:
    type: "categorical"
    choices: [-4000, -5000, -6000, -7000, -8000]
  obi_weight:
    type: "categorical"
    choices: [0.1, 0.2, 0.3, 0.4]
  ofi_weight:
    type: "categorical"
    choices: [0.3, 0.4, 0.5, 0.6, 0.7]
  cvd_weight:
    type: "categorical"
    choices: [1.0, 1.25, 1.5, 1.75, 2.0]
  micro_price_weight:
    type: "categorical"
    choices: [0.1, 0.2, 0.3, 0.4]
  composite_threshold:
    type: "categorical"
    choices: [0.7, 0.8, 0.9, 1.0, 1.1]
  ewma_lambda:
    type: "categorical"
    choices: [0.1, 0.15, 0.2, 0.25, 0.3]
  entry_price_offset:
    type: "categorical"
    choices: [0, 50, 100, 150, 200]
  dynamic_obi_enabled:
    type: "categorical"
    choices: [true, false]
  # --- Conditional Parameters ---
  # dynamic_obi_enabled が true の場合にのみ提案されます
  volatility_factor:
    type: "categorical"
    choices: [0.75, 1.0, 1.25, 1.5]
  min_threshold_factor:
    type: "categorical"
    choices: [0.5, 0.75, 1.0]
  max_threshold_factor:
    type: "categorical"
    choices: [1.0, 1.25, 1.5]
