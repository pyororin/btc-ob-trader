# optimizer/optimizer.py で使用する定数を定義します。
# このファイルが存在しない場合、オプティマイザは起動に失敗します。

# ------------------------------------------------------------------------------
# 基本設定 (Basic Settings)
# ------------------------------------------------------------------------------

# check_interval_seconds: パフォーマンスチェックを実行する間隔（秒単位）。
check_interval_seconds: 900

# params_dir: パラメータファイルやデータベースが保存されるディレクトリのパス。
params_dir: 'data/params'

# ------------------------------------------------------------------------------
# 最適化設定 (Optimization Settings)
# ------------------------------------------------------------------------------

# n_trials: 1回の最適化サイクルでOptunaが試行する回数。
n_trials: 1000

# warm_start_max_trials: 過去の学習結果を何件まで読み込むか。
warm_start_max_trials: 100

# min_trades_for_pruning: In-Sample(IS)最適化中に、ここで設定した取引回数に満たない試行を枝刈り（pruning）します。
min_trades_for_pruning: 10

# coarse_to_fine: Coarse-to-Fine（粗から密へ）探索の設定。
coarse_to_fine:
  enabled: true
  coarse_trials: 300
  fine_trials: 200
  top_trials_quantile_for_kde: 0.2

# ------------------------------------------------------------------------------
# 評価と検証の基準 (Evaluation & Validation Criteria)
# ------------------------------------------------------------------------------

# oos_min_sharpe_ratio: Out-of-Sample(OOS)評価での合格基準となるシャープレシオの最小値。
oos_min_sharpe_ratio: 0.5

# oos_min_trades: OOS評価での合格基準となる最小取引回数。
oos_min_trades: 10

# max_retry: OOS評価で不合格だった場合に、ISの上位から何番目までのパラメータを試すか。
max_retry: 5

# early_stop_count: OOS評価で、著しく低いシャープレシオがこの回数連続した場合にリトライを早期停止します。
early_stop_count: 5

# early_stop_threshold_ratio: 早期停止のトリガーとなるシャープレシオの閾値の割合。
early_stop_threshold_ratio: 0.7

# ------------------------------------------------------------------------------
# 高度な設定 (Advanced Settings)
# ------------------------------------------------------------------------------

# objective_weights: Optunaの目的関数の各指標に対する重み付け。
# これらの値は、最終的な評価スコアを計算する際の各指標の重要度を決定します。
# realization_rateを追加し、約定の実現性を重視します。
objective_weights:
  # シャープレシオ: リスク調整後のリターン
  sharpe_ratio: 1.0
  # プロフィットファクター: 総利益 / 総損失
  profit_factor: 1.0
  # 最大ドローダウン: 資産のピークからの最大下落率 (値が大きいほど良いと評価されるように内部で反転されます)
  max_drawdown: 0.5
  # SQN (System Quality Number): システムの品質を示す指標 (SharpeRatio * sqrt(TotalTrades))
  sqn: 0.5
  # 取引回数
  trades: 0.2
  # 約定実現率: シグナル確定数に対する実際の取引数の割合。オーバーフィットの抑制に重要。
  realization_rate: 2.0

# stability_analysis: パラメータの安定性分析（ロバスト性チェック）の設定。
stability_analysis:
  n_runs: 5
  jitter_factor: 0.05
  penalty_factor: 0.75

# ==============================================================================
# ウォークフォワード分析 (Walk-Forward Analysis, WFA) 設定
# ==============================================================================
# デーモンモードで新しい本番パラメータを検証する際に使用されるWFAの挙動を制御します。
wfa:
  # WFAで分析対象とする全体の期間（日数）。
  # 例えば 7 を設定すると、過去7日分のデータが分析対象となります。
  # システム稼働初期はデータが少ないため、短い期間に設定しています。
  total_days: 7

  # total_days の期間内に作成する「学習/検証」スプリット（fold）の数。
  # 例えば 5 を設定すると、期間を5つの重複するウィンドウに分割して分析します。
  n_splits: 5

  # 1つのスプリットにおける学習（最適化）期間の日数。
  # 例えば 1 を設定すると、1日分のデータでパラメータを学習します。
  train_days: 1

  # 1つのスプリットにおける検証期間の日数。
  # 例えば 0.5 を設定すると、学習後、続く12時間のデータでそのパラメータの有効性を検証します。
  validate_days: 0.5

  # 1つの学習スプリットごとに実行するOptunaの試行回数。
  # n_splits分だけ繰り返し実行されるため、全体のn_trialsよりは少ない値に設定します。
  n_trials_per_fold: 200

  # WFA全体を「成功」と判断し、本番パラメータを更新するために必要となる、
  # 検証に成功したスプリットの最小割合。
  # 例えば 0.6 を設定すると、全スプリットの60%以上が検証に成功した場合にのみ、パラメータが更新されます。
  min_success_ratio: 0.6

# analyzer: 最適化結果の分析設定。
analyzer:
  top_trials_quantile: 0.1

