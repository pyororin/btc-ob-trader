# OBI-Scalp-Bot 設定ファイル (config.yaml)
#
# このファイルは、OBI-Scalp-Bot のコアロジック、データベース接続、
# およびその他の運用パラメータを定義します。
#
# - 実番環境 (例: Cloud Run) では、環境変数による上書きを推奨します。
# - コメントに記載の「例」は、一般的な設定値であり、
#   市場の状況や戦略に応じて調整が必要です。

# --- 全体設定 ---

# 取引ペア (例: "btc_jpy", "eth_jpy")
# Coincheck API でサポートされているペアを指定します。
pair: "btc_jpy"

# スプレッド許容上限 (円)
# 指定した値以上にスプレッドが開いている場合、新規エントリーを見送ります。
# 市場の急変動時に不利な価格で約定するのを防ぐための安全装置です。
# 例: 40 (スプレッドが40円以内であれば許容)
spread_limit: 40

# 最大ロットサイズ比率
# 総資産に対する1注文あたりの最大ロットサイズの割合。
# リスク管理の要となるパラメータです。
# 例: 0.05 (総資産の5%を1トレードの最大サイズとする)
lot_max_ratio: 0.05

# --- ロング戦略パラメータ ---
long:
  # OBI (Order Book Imbalance) 閾値
  # この値を超えるとロングシグナルが検討されます。
  # OBI = (Bids - Asks) / (Bids + Asks)
  # 0に近いほど中立、1に近づくほど買いが強いことを示します。
  # 例: 0.25
  obi_threshold: 0.25

  # 利食い (Take Profit) 幅 (円)
  # エントリー価格からの利益確定の価格差。
  # 例: 15 (エントリー価格より15円上昇したら利食い)
  tp: 15

  # 損切り (Stop Loss) 幅 (円)
  # エントリー価格からの損失限定の価格差。必ず負の値を指定します。
  # 例: -10 (エントリー価格より10円下落したら損切り)
  sl: -10

# --- ショート戦略パラメータ ---
short:
  # OBI (Order Book Imbalance) 閾値
  # この値を下回るとショートシグナルが検討されます。
  # -1に近づくほど売りが強いことを示します。
  # 例: -0.27 (通常、ロングの閾値と対称的な値が使われますが、市場の特性に応じて非対称にすることもあります)
  obi_threshold: -0.27 # OBIは通常-1から1の範囲なので、ショートは負の値

  # 利食い (Take Profit) 幅 (円)
  # 例: 18
  tp: 18

  # 損切り (Stop Loss) 幅 (円)
  # 必ず負の値を指定します。
  # 例: -12
  sl: -12

# --- ボラティリティ適応設定 ---
volatility:
  # EWMA (指数平滑移動平均) の減衰パラメータ (λ)
  # リターンのEWMAおよびEWMVarianceを計算する際に使用します。
  # 0に近いほど過去のデータを重視し、1に近いほど直近のデータを重視します。
  # 短期的な変動への反応度を調整します。
  # 例: 0.1
  ewma_lambda: 0.1

  # 動的OBI閾値設定
  dynamic_obi:
    # 有効化フラグ
    # trueに設定すると、ボラティリティに応じてOBI閾値を動的に調整します。
    enabled: true

    # ボラティリティ係数
    # 標準偏差に掛ける係数。この値が大きいほど、OBI閾値の変動幅が大きくなります。
    # 例: 1.0
    volatility_factor: 1.0

    # 最小OBI閾値係数
    # ベースとなるOBI閾値に対する最小値の割合。
    # ボラティリティが極端に低い場合でも、閾値が下がりすぎるのを防ぎます。
    # 例: 0.5 (ベースの50%が下限)
    min_threshold_factor: 0.5

    # 最大OBI閾値係数
    # ベースとなるOBI閾値に対する最大値の割合。
    # ボラティリティが極端に高い場合でも、閾値が上がりすぎるのを防ぎます。
    # 例: 2.0 (ベースの200%が上限)
    max_threshold_factor: 2.0

# --- データベース (TimescaleDB) 接続設定 ---
#
# 本番環境では、以下の情報を環境変数経由で設定することを強く推奨します。
# (例: DB_USER, DB_PASSWORD)
database:
  # データベースホスト名
  # Docker Compose を利用する場合、サービス名 (例: "timescaledb") を指定します。
  # ローカルで直接実行する場合は "localhost" など。
  host: "timescaledb"

  # ポート番号
  # TimescaleDB/PostgreSQL のデフォルトは 5432 です。
  port: 5432

  # ユーザー名
  # .env ファイルや環境変数 `DB_USER` で設定することを推奨します。
  user: "postgres"

  # パスワード
  # .env ファイルや環境変数 `DB_PASSWORD` で設定することを強く推奨します。
  password: "password"

  # データベース名
  name: "obi_scalp_bot_db"

  # SSLモード
  # ローカル開発では "disable" が一般的です。
  # 本番環境では、セキュリティ要件に応じて "require" や "verify-full" を使用してください。
  sslmode: "disable"

# --- DBライター設定 ---
#
# TimescaleDBへのデータ書き込みを制御するサービスの設定です。
db_writer:
  # バッチサイズ
  # 一度にデータベースへ書き込むレコード数。
  # 大きすぎるとメモリを圧迫し、小さすぎると書き込み頻度が高くなりDB負荷が上がります。
  # 例: 100
  batch_size: 100

  # 書き込み間隔 (秒)
  # 非同期書き込みが有効な場合に、定期的にデータを書き込む間隔。
  # 例: 5
  write_interval_seconds: 5

  # 非同期書き込みの有効化
  # 現在は完全には実装されていません。将来的な機能拡張のためのプレースホルダーです。
  enable_async: false
