# OBI-Scalp-Bot 取引戦略設定ファイル (trade_config.yaml)
#
# このファイルは、ボットの取引ロジックに直接関わるパラメータを管理します。
# 市場の状況やバックテストの結果に応じて、これらの値を調整してください。

# ------------------------------------------------------------------------------
# 基本取引設定 (Basic Trading)
# ------------------------------------------------------------------------------

# pair: 取引対象の通貨ペア。
# 例: "btc_jpy", "eth_jpy"
pair: "btc_jpy"

# spread_limit: 取引を許可する最大のスプレッド（最良買値と最良売値の差）を円で指定します。
# これよりスプレッドが広い場合、ボットは新規エントリーを見送ります。
# 市場の流動性が低い時や急変動時に、不利な価格で約定するのを防ぐためのフィルターです。
spread_limit: 100

# ------------------------------------------------------------------------------
# ポジションサイズ設定 (Position Sizing)
# ------------------------------------------------------------------------------

# lot_max_ratio: 1回の注文で使用する証拠金の最大比率。
# 例えば、0.05 は利用可能残高の5%を上限とすることを意味します。
# リスク管理の重要な要素です。値を大きくするとハイリスク・ハイリターンになります。
lot_max_ratio: 0.03

# order_ratio: 注文量に対する比率。
# この比率は、アダプティブ・ポジションサイジング機能によって動的に調整されることがあります。
order_ratio: 0.15

# adaptive_position_sizing: アダプティブ（適応型）ポジションサイズ調整機能の設定。
# 直近の取引成績に応じて、自動でロットサイズを調整します。
adaptive_position_sizing:
  # enabled: この機能を有効にするか (`true`) 無効にするか (`false`)。
  enabled: true
  # num_trades: パフォーマンス評価の対象とする直近の取引回数。
  num_trades: 5
  # reduction_step: 損失が出た場合に、次の注文のロットサイズを縮小する係数。
  # 0.8 は、現在のロットサイズを80%に減らすことを意味します（20%減）。
  reduction_step: 0.8
  # min_ratio:ロットサイズの下限を、元の `order_ratio` に対する割合で指定します。
  # 0.5 は、`order_ratio` の50%より小さくならないように制限します。
  min_ratio: 0.5

# ------------------------------------------------------------------------------
# エントリー戦略 (Entry Strategy)
# ------------------------------------------------------------------------------

# long: ロング（買い）エントリーの戦略設定。
long:
  # obi_threshold: ロングエントリーをトリガーするOBI (Order Book Imbalance) の閾値。
  # OBIがこの値を超えると、買いシグナルの候補となります。正の値を指定します。
  obi_threshold: 0.5
  # tp: 利食い（Take Profit）を行う価格幅を円で指定します。
  # エントリー価格からこの値幅分、価格が上昇した場合に利食い注文が執行されます。
  tp: 60
  # sl: 損切り（Stop Loss）を行う価格幅を円で指定します。
  # エントリー価格からこの値幅分、価格が下落した場合に損切り注文が執行されます。
  # 必ず負の値を指定してください。
  sl: -30

# short: ショート（売り）エントリーの戦略設定。
short:
  # obi_threshold: ショートエントリーをトリガーするOBIの閾値。
  # OBIがこの値を下回ると（より負の方向に大きいと）、売りシグナルの候補となります。負の値を指定します。
  obi_threshold: -0.25
  # tp: 利食い（Take Profit）を行う価格幅を円で指定します。
  # エントリー価格からこの値幅分、価格が下落した場合に利食い注文が執行されます。
  tp: 60
  # sl: 損切り（Stop Loss）を行う価格幅を円で指定します。
  # エントリー価格からこの値幅分、価格が上昇した場合に損切り注文が執行されます。
  # 必ず負の値を指定してください（例: -20 は20円の上昇で損切り）。
  sl: -30

# ------------------------------------------------------------------------------
# シグナルフィルター (Signal Filters)
# ------------------------------------------------------------------------------

# signal: シグナルの精度を高めるためのフィルター設定。
signal:
  # hold_duration_ms: シグナル確定までの待機時間（ミリ秒）。
  # OBIが閾値を超えても即座にエントリーせず、この時間だけ閾値を超え続けた場合にシグナルが確定します。
  # 値を大きくすると「ダマシ」を避けやすくなりますが、エントリーは遅れます。
  # 値を小さくすると素早く反応できますが、ノイズに弱くなります。
  hold_duration_ms: 1200

  # slope_filter: OBIの傾き（変化率）を利用したフィルター設定。
  # OBIの値だけでなく、その変化の勢いも考慮に入れることで、トレンドの初動を捉えやすくなります。
  slope_filter:
    # enabled: このフィルターを有効にするか (`true`) 無効にするか (`false`)。
    enabled: true
    # period: 傾きを計算するために使用する、直近のOBIデータの数。
    period: 10
    # threshold: エントリーを許可するOBIの最小傾き。
    # 例えば、ロングシグナルの場合、OBIの傾きがこの値より大きい必要があります。
    threshold: 0.01

# ------------------------------------------------------------------------------
# 動的パラメータ調整 (Dynamic Parameters)
# ------------------------------------------------------------------------------

# volatility: 市場のボラティリティ（価格変動の大きさ）に関する設定。
volatility:
  # ewma_lambda: ボラティリティ計算に使用するEWMA（指数平滑移動平均）のλ（ラムダ）値。
  # 0に近いほど過去の値を重視し、1に近いほど直近の値を重視します。
  ewma_lambda: 0.3
  # dynamic_obi: ボラティリティに応じてOBIの閾値を動的に調整する機能。
  dynamic_obi:
    # enabled: この機能を有効にするか (`true`) 無効にするか (`false`)。
    # trueにすると、ボラティリティが高い時は閾値を広げ、低い時は狭めるよう自動調整します。
    enabled: false
    # volatility_factor: ボラティリティをOBI閾値の調整にどれだけ反映させるかの係数。
    volatility_factor: 1.6
    # min_threshold_factor: 動的閾値の下限を、元のOBI閾値に対する割合で指定します。
    min_threshold_factor: 0.8
    # max_threshold_factor: 動的閾値の上限を、元のOBI閾値に対する割合で指定します。
    max_threshold_factor: 1.6

# ------------------------------------------------------------------------------
# 執行戦略 (Execution Strategy)
# ------------------------------------------------------------------------------

# twap: TWAP (Time-Weighted Average Price) 注文の設定。
# 大きな注文を時間で分割して発注し、市場への価格インパクトを抑えつつ平均取得単価を安定させます。
twap:
  # enabled: TWAP注文を有効にするか (`true`) 無効にするか (`false`)。
  enabled: false
  # max_order_size_btc: 1回の分割注文における最大のサイズ（BTC）。
  # 最小値は取引所の制約により 0.01 です。
  max_order_size_btc: 0.01
  # interval_seconds: 分割された注文を発注する間隔（秒）。
  interval_seconds: 5
  # partial_exit_enabled: ポジションの一部を利益確定する（部分利食い）機能を有効にするか。
  # この機能は現在、TWAP注文と連動しています。
  partial_exit_enabled: false
  # profit_threshold: 部分利食いをトリガーする利益率（%）。
  # 例: 0.5 は、0.5%の含み益が出た場合にトリガーされます。
  profit_threshold: 0.5
  # exit_ratio: 部分利食いするポジションの割合。
  # 例: 0.5 は、現在のポジションの50%を利益確定します。
  exit_ratio: 0.5

# ------------------------------------------------------------------------------
# リスク管理 (Risk Management)
# ------------------------------------------------------------------------------

risk:
  # max_drawdown_percent: 許容する最大のドローダウン率（%）。
  # 資産のピークからの下落率がこの値を超えた場合、ボットは新規の注文を停止します。
  # 非常に重要なリスク管理項目です。
  max_drawdown_percent: 8.0
  # max_position_jpy: 許容する最大のポジションサイズ（日本円換算）。
  # この値を超えて新規のポジションを持つことはありません。
  max_position_jpy: 500000.0
