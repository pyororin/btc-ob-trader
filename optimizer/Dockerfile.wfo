# This Dockerfile creates an environment for the Walk-Forward Optimization (WFO) runner.
# The WFO runner is a Go application that orchestrates the optimization process by
# calling the Python-based optimizer script for each cycle. Therefore, this image
# needs to contain both the Go toolchain (to build the runner) and a Python
# environment (to run the optimizer script).

FROM python:3.9-slim

# 1. Install necessary dependencies, including Go
ARG GO_VERSION=1.22.5
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    wget ca-certificates git && \
    wget https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz && \
    tar -C /usr/local -xzf go${GO_VERSION}.linux-amd64.tar.gz && \
    rm go${GO_VERSION}.linux-amd64.tar.gz && \
    apt-get remove -y wget && \
    apt-get autoremove -y && \
    rm -rf /var/lib/apt/lists/*
ENV PATH="/usr/local/go/bin:${PATH}"

# 2. Set up Python virtual environment
ENV VENV_PATH=/opt/venv
RUN python3 -m venv $VENV_PATH
ENV PATH="$VENV_PATH/bin:$PATH"

# 3. Install Python dependencies
WORKDIR /app
COPY optimizer/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# 4. Set PYTHONPATH so the interpreter can find the 'optimizer' module
ENV PYTHONPATH /app

# 5. Copy all source code
# This is necessary because both the Go runner and the Python optimizer need access to the codebase.
COPY . .

# 5. Build the Go WFO runner application
# We build it as a static binary so it has no external dependencies.
RUN echo "Building wfo-runner Go application..." && \
    CGO_ENABLED=0 go build -v -o /usr/local/bin/wfo-runner ./cmd/wfo-runner && \
    echo "Build complete."

# 6. Set the entrypoint to our compiled Go application.
# The Go app will then call the Python scripts as needed.
ENTRYPOINT ["/usr/local/bin/wfo-runner"]

# No CMD is needed, as the wfo-runner is a self-contained, one-shot task.
