version: '3.8'

services:
  bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: obi-scalp-bot
    volumes:
      # Mount the local .env file into the container.
      # Create a .env file from .env.sample and fill in your API keys.
      - ./.env:/app/.env:ro
      # Mount the local config file into the container for easier development.
      # Changes to config.yaml on the host will be reflected in the container without rebuilding.
      - ./config/config.yaml:/app/config/config.yaml:ro
    env_file:
      - .env # Loads environment variables from the .env file at the root of the project
    environment:
      - DB_HOST=timescaledb
    ports:
      - "8080:8080" # Expose healthcheck port
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    depends_on:
      timescaledb:
        condition: service_healthy
    networks:
      - bot_network

  timescaledb:
    image: timescale/timescaledb-ha:pg14-latest
    container_name: timescaledb-obi
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${DB_USER:-your_db_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-your_db_password}
      POSTGRES_DB: ${DB_NAME:-obi_scalp_bot_db}
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
      - ./db/schema:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - bot_network

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana-obi
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana_data:/var/lib/grafana
    depends_on:
      - timescaledb
    restart: unless-stopped
    networks:
      - bot_network

networks:
  bot_network:
    driver: bridge

volumes:
  timescaledb_data:
  grafana_data:
