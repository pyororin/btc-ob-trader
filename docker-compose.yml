version: '3.8'

services:
  bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: obi-scalp-bot
    volumes:
      # Mount the local .env file into the container.
      # Create a .env file from .env.sample and fill in your API keys.
      - ./.env:/app/.env:ro
      # Mount the local config file into the container for easier development.
      # Changes to config.yaml on the host will be reflected in the container without rebuilding.
      - ./config/config.yaml:/app/config/config.yaml:ro
    env_file:
      - .env # Loads environment variables from the .env file at the root of the project
    # ports:
      # - "8080:8080" # Example: expose port 8080 for health checks if implemented
    # command: ["./obi-scalp-bot", "-config", "config/config.yaml"] # Optional: override CMD in Dockerfile
    # Override DB_HOST to use the service name for Docker internal networking
    environment:
      - DB_HOST=timescaledb
      # Other environment variables like DB_USER, DB_PASSWORD, DB_NAME can also be set here
      # to override .env or defaults, or ensure they are available if .env is missing.
      # Example:
      # - DB_USER=${DB_USER:-your_db_user} # Use DB_USER from .env, default to your_db_user
      # - DB_PASSWORD=${DB_PASSWORD:-your_db_password}
      # - DB_NAME=${DB_NAME:-obi_scalp_bot_db}
      # - DB_PORT=${DB_PORT:-5432}
      # - DB_SSLMODE=${DB_SSLMODE:-disable}
    ports:
      - "8080:8080" # Expose healthcheck port
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s # Give the container time to start before the first healthcheck.
    restart: unless-stopped # This is the one to keep
    depends_on:
      timescaledb:
        condition: service_healthy # Wait for timescaledb to be healthy
    networks:
      - bot_network

  timescaledb:
    image: timescale/timescaledb-ha:pg14-latest # Use HA image for TimescaleDB features
    container_name: timescaledb-obi
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${DB_USER:-your_db_user} # Use from .env or default
      POSTGRES_PASSWORD: ${DB_PASSWORD:-your_db_password} # Use from .env or default
      POSTGRES_DB: ${DB_NAME:-obi_scalp_bot_db}       # Use from .env or default
      # For TimescaleDB specific settings, if needed
      # TS_TUNE_MEMORY: "4GB" # Example: Tune based on available memory
      # TS_TUNE_NUM_CPUS: "2"  # Example: Tune based on available CPUs
    volumes:
      - timescaledb_data:/var/lib/postgresql/data # Persist data
      - ./db/schema:/docker-entrypoint-initdb.d   # Mount schema initialization scripts
                                                  # All .sql, .sh files in this dir will be run on first init
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - bot_network

volumes:
  timescaledb_data: # Defines the named volume for TimescaleDB data persistence

networks:
  bot_network: # Defines the custom network for services to communicate
    driver: bridge
